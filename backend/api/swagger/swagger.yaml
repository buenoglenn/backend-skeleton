swagger: "2.0"
info:
  version: "0.0.1"
  title: AgriViz
# during dev, should point to your local machine
host: api.ema.com
# basePath prefixes all resource paths 
basePath: /api/v1
# 
schemes:
  # tip: remove http to make production-grade
  # - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json

securityDefinitions:
  jwt:
    type: apiKey
    name: Authorization
    in: header

paths:
  /users:
    x-swagger-router-controller: UserController
    get:
      description: "Gets all users"
      operationId: retrieveAllUsers
      security:
        - jwt: []
      x-access-control:
        role: "user"
      parameters:
        - in: header
          name: Authorization
          description: "Bearer access token in format Bearer {{accessToken}}"
          required: true
          type: string
          format: string
      responses:
        "200":
          description: Success
          schema:
            type: string
        "401":
          description: "access token is not valid"
          schema:
            $ref: "#/definitions/ErrorMessage"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /user:
    x-swagger-router-controller: UserController
    get:
      description: "Gets the user"
      operationId: retrieveUser
      security:
        - jwt: []
      x-access-control:
        role: "user"
      parameters:
        - in: header
          name: Authorization
          description: "Bearer access token in format Bearer {{accessToken}}"
          required: true
          type: string
          format: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/UserSummary"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: "Updates the user"
      operationId: updateUser
      security:
        - jwt: []
      x-access-control:
        role: "user"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: "Bearer access token in format Bearer {{accessToken}}"
          required: true
          type: string
          format: string
        - in: body
          name: body
          description: "profile request payload"
          required: true
          schema:
            $ref: "#/definitions/UserUpdateRequest"
      responses:
        "200":
          description: Success
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /users/register:
    x-swagger-router-controller: UserController
    post:
      description: "Registers a user"
      operationId: register
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: "Registers a user in the application"
          required: true
          schema:
            $ref: "#/definitions/RegisterRequest"
      responses:
        "200":
          description: Success
        "400":
          description: "Invalid Request"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /login:
    x-swagger-router-controller: UserController
    post:
      description: "User login"
      operationId: login
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: "Username and password"
          required: true
          schema:
            $ref: "#/definitions/LoginRequest"
      responses:
        "200":
          description: "access token and refresh token"
          schema:
            $ref: "#/definitions/LoginResponse"
        "400":
          description: "Invalid Request"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /users/forgotpassword:
    x-swagger-router-controller: UserController
    post:
      description: "Send forgot password email to registered email address, the implementation should validate that a user is registered with the specified email address, anonymous"
      operationId: forgotPassword
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          description: "change password request payload"
          required: true
          schema:
            $ref: "#/definitions/ForgotPasswordReq"
      responses:
        "200":
          description: "successful operation"
        "400":
          description: "the validation failed, client request is invalid"
          schema:
            $ref: "#/definitions/ErrorMessage"
        "404":
          description: "user not found with the specified email"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /users/refreshtoken:
    x-swagger-router-controller: UserController
    post:
      description: "Validate the access token and issue a new access token, non-anonymous"
      operationId: refreshToken
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: "Bearer access token in format Bearer {{accessToken}}"
          required: true
          type: string
          format: string
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/LoginRes"
        "400":  
          description: "the validation failed, client request is invalid"
          schema:
            $ref: "#/definitions/ErrorMessage"
        "401":
          description: "access token is not valid"
          schema:
            $ref: "#/definitions/ErrorMessage"
  /swagger:
    x-swagger-pipe: swagger_raw
######################
# Schema Definitions #
######################
definitions:
  ErrorMessage:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: "Error description"
  RegisterRequest:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
      password:
        type: string
  RetrieveUserResponse:
    required:
      - message
    properties:
      message:
        type: string
  ErrorResponse:
    required:
      - message
    properties:
      message:
        type: string
  UserSummary:
    type: object
  UserUpdateRequest:
    type: object
    properties:
      firstName:
        type: string
        description: "User's first name"
      lastName:
        type: string
        description: "User's last name"
      gender:
        type: string
        description: "User's gender"
      dob:
        type: string
        description: "User's date of birth"
      email:
        type: string
        description: "User's email"
      username:
        type: string
        description: "User's username"
      password:
        type: string
        description: "User's password"
      status:
        type: string
        description: "User's status"
      resetPasswordToken:
        type: string
        description: "User's reset password token"
      contactNo:
        type: string
        description: "User's contact number"
  LoginRequest:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
    required:
      - username
      - password
  LoginResponse:
    type: object
    required:
      - accessToken
      - refreshToken
    properties:
      accessToken:
        type: string
        description: "The Access Token that can be used as Authorization header"
      refreshToken:
        type: string
        description: "The Refresh Token that can be used to obtain a new access token in case of remember me"
  ForgotPasswordReq:
    type: object
    required:
      - username
    properties:
      username:
        type: string
        description: "the user's email address to send the forgot password email"
  ChangeForgotPasswordReq:
    type: object
    required:
      - password
      - token
    properties:
      password:
        type: string
        description: "the new password"
      token:
        type: string
        description: "the rest password token"
  LoginRes:
    type: object
    required:
      - accessToken
      - refreshToken
    properties:
      accessToken:
        type: string
        description: "the access token that can be used as Authorization header"
      refreshToken:
        type: string
        description: "the refresh token that can be used to obtain a new access token in case of remember me"

